name: E-Commerce CI

on:
  push:
    branches:
      - main
      - dev
      - 'feature/**'
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch: {}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      # - name: Run flake8
      #   run: flake8 .

      # - name: Run black check
      #   run: black --check .

      # - name: Run isort check
      #   run: isort --check-only .

      # - name: Run mypy
      #   run: mypy .

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run Unit Tests
        run: pytest tests/ -v --tb=short

      - name: Run Integration Tests
        run: pytest tests/integration/ -v --tb=short

  build:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: SonarSource/sonarqube-scan-action@v6 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  publish:
    name: Build & Publish Python Package to Azure DevOps Feed
    runs-on: ubuntu-latest
    needs: [tests] 
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tooling
        run: |
          pip install flake8 black isort mypy bandit
          pip install build
          pip install build twine

      - name: Build package (sdist + wheel)
        run: python -m build

      - name: Create ~/.pypirc for Azure DevOps
        run: |
          cat > ~/.pypirc <<EOF
          [distutils]
          index-servers = azure

          [azure]
          repository: https://pkgs.dev.azure.com/${{ secrets.AZDO_ORG }}/${{ secrets.AZDO_PROJECT }}/_packaging/${{ secrets.AZDO_FEED }}/pypi/upload/
          username: azdo
          password: ${{ secrets.AZDO_PAT }}
          EOF
          chmod 600 ~/.pypirc

      - name: Publish to Azure DevOps Feed
        run: twine upload --repository azure dist/*
  
      - name: Get package name and version #It will collect the version number from toml file and will use it further for the no upstream caching
        id: pkginfo
        run: |
          NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml','rb'))['project']['name'])")
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml','rb'))['project']['version'])")
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT 
      
     # - name: (Optional) Test install from feed (VARIANTE OHNE AUTO VERSIONING) unterhalb ist die mit auto versioning --> see my-python-package==0.1.0
          #   run: |
          #     python -m venv venv
          #     source venv/bin/activate
          #     pip install --upgrade pip
          #     pip install --index-url https://pkgs.dev.azure.com/${{ secrets.AZDO_ORG }}/${{ secrets.AZDO_PROJECT }}/_packaging/${{ secrets.AZDO_FEED }}/pypi/simple/ my-python-package==0.1.0

      - name: Verify install (no upstream caching)
        env:
          FEED: https://azdo:${{ secrets.AZDO_PAT }}@pkgs.dev.azure.com/${{ secrets.AZDO_ORG }}/${{ secrets.AZDO_PROJECT }}/_packaging/${{ secrets.AZDO_FEED }}/pypi/simple
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install --index-url https://pypi.org/simple --extra-index-url "$FEED" "${{ steps.pkginfo.outputs.name }}==${{ steps.pkginfo.outputs.version }}"


      - name: Upload built artifacts (optional)
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/*

  deploy:
    needs: publish
    if: ${{ needs.publish.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download published wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist

      - name: Locate wheel file
        id: wheel
        shell: bash
        run: |
          set -e
          WHEEL=$(ls dist/*.whl | head -n1)
          if [ -z "$WHEEL" ]; then echo "No wheel found in dist/"; ls -la dist || true; exit 1; fi
          echo "wheel=$WHEEL" >> $GITHUB_OUTPUT
          echo "wheel_name=$(basename "$WHEEL")" >> $GITHUB_OUTPUT

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Generate cloud-config (Bootstrap Server)
        run: |
          cat > cloud-config.yaml <<'EOF'
          #cloud-config
          package_update: true
          package_upgrade: true
          packages:
            - nginx
            - git
            - python3-pip
            - python3-venv
            - sqlite3
            - mariadb-client-core
            - pkg-config
            - libmariadb-dev
            - libmariadb-dev-compat
            - python-is-python3
            - unzip

          ssh_authorized_keys:
            - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDewAWNeWYRCqYkhdUJSc/ZE2GIwMGsTUIPL8k1i4J6sjTVgpXmUb1UueW6hin6pgQuRpF0E+qYllt6/SBVSDL4+xYPAFVRJJEEe0o146AZkid/CD4YeGFC1871O4TxVYaD62nsEU4xiUK8mkKRDF92dGM6JQmlSP0tdbZ0iKQRsLWWPARvvaFYUDAoaqFEn+ZZA+BDLBuBpOmPli2tDcwORxKfMk3Vudr9rr3CU57HEWc5Zr8aaffP0pfNT/uUYa8L5oS7o6hZPVWHyWbrvGyGkpHfqKQl6CqmoCofC9nylvYK8nN7SSxHyfAFkn/Jk3X5LO95Y7/mnffBqJx/rU1gPc6kvhk3XoRTSnrVBaaIJKbup4s7gIZ+jBz79Nuh7oB5g89xUBbsE0xzjpj1Q7+3GPU7UxT1GMIF729ZAbKwOdkDTWXd8BUC0cGd+ActWMZv92hPUolq8+UdhwsePpPGKMCWxMWA1onCBZ9ycDGshPu4Pe2Y9BR+pdeSB96FtHiyHMJEA/IBhyebcugcVsAmrSjsA5MoavXsYqZ2arWRIrA2bvG9OsSYqRVEgcav35oCKV3NdXEnotkgjDMIYTZ+ZbdX83i/rRtr4UrcCSz2YqG1RdvEiOU6B5ZLMFUbKR8Pe7c4BWR5ouvqWfTsrsMpm0UswE2BDgI1vRrCYJwNqQ== taher@macbook-pro-von-taher.home

          runcmd:
            - mkdir -p /opt/flaskapp
            - cd /opt/flaskapp
            - python3 -m venv /opt/flaskapp/venv
            - /opt/flaskapp/venv/bin/pip install --upgrade pip
            - /opt/flaskapp/venv/bin/pip install gunicorn flask
            - mkdir -p /var/log/gunicorn
            - chown -R ubuntu:ubuntu /var/log/gunicorn

            - |
              cat > /etc/systemd/system/ecommerce.service <<'EOT'
              [Unit]
              Description=E-Commerce Flask App (Gunicorn)
              After=network.target

              [Service]
              User=ubuntu
              WorkingDirectory=/opt/flaskapp
              Environment="PATH=/opt/flaskapp/venv/bin"
              ExecStart=/opt/flaskapp/venv/bin/gunicorn --bind 127.0.0.1:8000 e_commerce:app --access-logfile /var/log/gunicorn/ecommerce.access.log --error-logfile /var/log/gunicorn/ecommerce.error.log
              Restart=always

              [Install]
              WantedBy=multi-user.target
              EOT

            - |
              cat > /etc/nginx/sites-available/ecommerce <<'EOT'
              server {
                  listen 80;
                  location / {
                      proxy_pass http://127.0.0.1:8000;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
              }
              EOT

            - ln -sf /etc/nginx/sites-available/ecommerce /etc/nginx/sites-enabled/ecommerce
            - rm -f /etc/nginx/sites-enabled/default
            - nginx -t
            - systemctl enable nginx
            - systemctl restart nginx
            - systemctl daemon-reload
            - systemctl enable ecommerce.service
            - systemctl start ecommerce.service
          EOF

      - name: Launch EC2 instance (bootstrap + deploy base)
        run: |
          aws ec2 run-instances \
            --image-id ami-0360c520857e3138f \
            --instance-type t3.micro \
            --security-group-ids sg-0bb418deecfe5ba5f \
            --subnet-id subnet-036e3bffe11c6d11c \
            --user-data file://cloud-config.yaml \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=ecommerce-app}]'

      - name: Wait for instance
        run: sleep 180s

      - name: Fetch Instance ID and IP
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=ecommerce-app" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "IP=$IP" >> $GITHUB_ENV
          echo "Public IP: $IP"

      - name: Copy wheel artifact to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.IP }}
          username: ubuntu
          key: ${{ secrets.PRV_KEY }}
          port: 22
          source: "dist/${{ steps.wheel.outputs.wheel_name }}"
          target: "/tmp/"
          overwrite: true

      - name: Install app from wheel (Deploy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.IP }}
          username: ubuntu
          key: ${{ secrets.PRV_KEY }}
          port: 22
          script: |
            set -euo pipefail
            source /opt/flaskapp/venv/bin/activate
            pip install --no-cache-dir --force-reinstall "/tmp/${{ steps.wheel.outputs.wheel_name }}"
            sudo systemctl restart ecommerce.service
            sudo systemctl status --no-pager --full ecommerce.service || true