name: E-Commerce CD

on:
  workflow_run:
    workflows: ["E-Commerce CI"]
    types: [completed]

jobs:

on:
  workflow_run:
    workflows: ["E-Commerce CI"]
    types: [completed]


  deploy:
    needs: publish
    if: ${{ needs.publish.result == 'success' }}
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download published wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist

      - name: Locate wheel file
        id: wheel
        shell: bash
        run: |
          set -e
          WHEEL=$(ls dist/*.whl | head -n1)
          if [ -z "$WHEEL" ]; then echo "No wheel found in dist/"; ls -la dist || true; exit 1; fi
          echo "wheel=$WHEEL" >> $GITHUB_OUTPUT
          echo "wheel_name=$(basename "$WHEEL")" >> $GITHUB_OUTPUT

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Generate cloud-config
        run: |
          cat > cloud-config.yaml <<'EOF'
          #cloud-config
          users:
            - name: ubuntu
              shell: /bin/bash
              groups: [sudo]
              sudo: ["ALL=(ALL) NOPASSWD:ALL"]
              ssh_authorized_keys:
                - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDewAWNeWYRCqYkhdUJSc/ZE2GIwMGsTUIPL8k1i4J6sjTVgpXmUb1UueW6hin6pgQuRpF0E+qYllt6/SBVSDL4+xYPAFVRJJEEe0o146AZkid/CD4YeGFC1871O4TxVYaD62nsEU4xiUK8mkKRDF92dGM6JQmlSP0tdbZ0iKQRsLWWPARvvaFYUDAoaqFEn+ZZA+BDLBuBpOmPli2tDcwORxKfMk3Vudr9rr3CU57HEWc5Zr8aaffP0pfNT/uUYa8L5oS7o6hZPVWHyWbrvGyGkpHfqKQl6CqmoCofC9nylvYK8nN7SSxHyfAFkn/Jk3X5LO95Y7/mnffBqJx/rU1gPc6kvhk3XoRTSnrVBaaIJKbup4s7gIZ+jBz79Nuh7oB5g89xUBbsE0xzjpj1Q7+3GPU7UxT1GMIF729ZAbKwOdkDTWXd8BUC0cGd+ActWMZv92hPUolq8+UdhwsePpPGKMCWxMWA1onCBZ9ycDGshPu4Pe2Y9BR+pdeSB96FtHiyHMJEA/IBhyebcugcVsAmrSjsA5MoavXsYqZ2arWRIrA2bvG9OsSYqRVEgcav35oCKV3NdXEnotkgjDMIYTZ+ZbdX83i/rRtr4UrcCSz2YqG1RdvEiOU6B5ZLMFUbKR8Pe7c4BWR5ouvqWfTsrsMpm0UswE2BDgI1vRrCYJwNqQ== taher@macbook-pro-von-taher.home
          
          
          package_update: true
          packages:
            - python3
            - python3-venv
            - python3-pip

          runcmd:
            - sudo -u ubuntu ssh-keygen -t rsa -b 4096 -f /home/ubuntu/.ssh/id_rsa -N ""
            - echo "-----BEGIN EC2 PRIVATE KEY-----" > /dev/console
            - cat /home/ubuntu/.ssh/id_rsa >> /dev/console
            - echo "-----END EC2 PRIVATE KEY-----" > /dev/console
            - cat /home/ubuntu/.ssh/id_rsa.pub >> /home/ubuntu/.ssh/authorized_keys
          EOF

      - name: Launch EC2 instance with cloud-init
        run: |
          aws ec2 run-instances \
            --image-id ami-0360c520857e3138f \
            --instance-type t3.micro \
            --security-group-ids sg-0bb418deecfe5ba5f \
            --subnet-id subnet-036e3bffe11c6d11c \
            --private-ip-address 10.11.5.205 \
            --user-data file://cloud-config.yaml \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=my-flaskapp}]'

      - name: Sleep until console output is ready
        run: sleep 120s

      # - name: Fetch Instance ID and IP
      #   run: |
      #     INSTANCE_ID=$(aws ec2 describe-instances \
      #       --filters "Name=tag:Name,Values=my-flaskapp" "Name=instance-state-name,Values=running" \
      #       --query "Reservations[0].Instances[0].InstanceId" \
      #       --output text)
      #     IP=$(aws ec2 describe-instances \
      #       --instance-ids $INSTANCE_ID \
      #       --query "Reservations[0].Instances[0].PublicIpAddress" \
      #       --output text)
      #     echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
      #     echo "IP=$IP" >> $GITHUB_ENV
      #     echo "Instance: ${{ env.INSTANCE_ID }} / IP: ${{ env.IP }}"

      # - name: Extract private key from console output
      #   run: |
      #     OUTPUT=$(aws ec2 get-console-output \
      #       --instance-id ${{ env.INSTANCE_ID }} \
      #       --query "Output" \
      #       --output text)
      #     echo "$OUTPUT" > console.log
      #     PRIVATE_KEY=$(sed -n '/-----BEGIN EC2 PRIVATE KEY-----/,/-----END EC2 PRIVATE KEY-----/p' console.log \
      #       | grep -v "BEGIN EC2 PRIVATE KEY" \
      #       | grep -v "END EC2 PRIVATE KEY")
      #     echo "PRIVATE_KEY<<EOF" >> $GITHUB_ENV
      #     echo "$PRIVATE_KEY" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV
      #     echo "$PRIVATE_KEY" > id_rsa
      #     chmod 400 id_rsa

      - name: Copy wheel to EC2 (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_KEY }}
          port: 22
          source: "dist/${{ steps.wheel.outputs.wheel_name }}"
          target: "/tmp/"
          overwrite: true

      - name: Install and restart service (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_KEY }}
          port: 22
          script: |
            set -euo pipefail
            sudo mkdir -p /opt/flaskapp && sudo chown -R ubuntu:ubuntu /opt/flaskapp
            if [ ! -d /opt/flaskapp/venv ]; then python3 -m venv /opt/flaskapp/venv; fi
            source /opt/flaskapp/venv/bin/activate
            pip install --upgrade pip
            pip install --no-cache-dir --force-reinstall "/tmp/${{ steps.wheel.outputs.wheel_name }}"
            sudo systemctl daemon-reload
            sudo systemctl enable --now flaskapp
            sudo systemctl restart flaskapp
            sleep 2
            sudo systemctl status --no-pager --full flaskapp || true
